import{_ as i,a as l,b as c,c as r,d as u}from"./robustness_test_plot-d3hRRG04.js";import{_ as d,c as m,a as t,b as a,d as n,e as p,w as o,r as b,o as v}from"./app-D_z27tro.js";const k={};function _(h,s){const e=b("RouteLink");return v(),m("div",null,[s[9]||(s[9]=t(`<p>在Tensorboard中，我们可以看到很多有用的指标，可以监测训练过程和模型的收敛情况。它们全部和<code>my_model.py</code>中模型的<code>forward()</code>函数返回的字典中的信息对应。</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py"><pre><code><span class="line"><span class="token comment"># 构建输出字典</span></span>
<span class="line">        output_dict <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token string">&quot;backward_loss&quot;</span><span class="token punctuation">:</span> combined_loss<span class="token punctuation">,</span></span>
<span class="line">            <span class="token string">&quot;pred_mask&quot;</span><span class="token punctuation">:</span> torch<span class="token punctuation">.</span>sigmoid<span class="token punctuation">(</span>seg_pred<span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">            <span class="token string">&quot;pred_label&quot;</span><span class="token punctuation">:</span> torch<span class="token punctuation">.</span>sigmoid<span class="token punctuation">(</span>cls_pred<span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line"></span>
<span class="line">            <span class="token string">&quot;visual_loss&quot;</span><span class="token punctuation">:</span> <span class="token punctuation">{</span></span>
<span class="line">                <span class="token string">&quot;total_loss&quot;</span><span class="token punctuation">:</span> combined_loss<span class="token punctuation">,</span></span>
<span class="line">                <span class="token string">&quot;seg_loss&quot;</span><span class="token punctuation">:</span> seg_loss<span class="token punctuation">,</span></span>
<span class="line">                <span class="token string">&quot;cls_loss&quot;</span><span class="token punctuation">:</span> cls_loss</span>
<span class="line">            <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line"></span>
<span class="line">            <span class="token string">&quot;visual_image&quot;</span><span class="token punctuation">:</span> <span class="token punctuation">{</span></span>
<span class="line">                <span class="token string">&quot;pred_mask&quot;</span><span class="token punctuation">:</span> seg_pred<span class="token punctuation">,</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">        <span class="token keyword">return</span> output_dict</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>损失函数的可视化对应<code>visual_loss</code>字段对应的字典:</p><p><img src="`+i+'" alt=""></p><p>评价指标的计算来自于<code>pred_mask</code>和<code>pred_label</code>的结果和<code>mask</code>计算得到：</p><p><img src="'+l+'" alt="alt text"></p><p>可视化的预测结果，由<code>visual_image</code>字段得到，且默认输入的<code>image</code>，<code>mask</code>等图像也会自动被可视化输出，用于直接观察模型当前预测不好的地方在哪，方便进一步改进模型。</p><p><img src="'+c+`" alt=""></p><div class="hint-container note"><p class="hint-container-title">注意</p><p>教程这里应该有图片样例，如果没看到图片，请检查网络连接或开启VPN。</p></div><p>所有训练后得到的权重（Checkpoint）都保存在了训练<code>train_mymodel.sh</code>脚本开头的<code>base_dir</code>所对应的路径中。相应的<code>Tensorboard</code>的日志文件也保存在这里，以供后续取用和查阅日志。</p><p>除了Tensorboard日志，我们还提供了一个纯文本的日志<code>log.txt</code>留作档案，它保存的内容比较简单，只包含每一个Epoch结束后所有的标量信息。样例如下：</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text"><pre><code><span class="line">......</span>
<span class="line">{&quot;train_lr&quot;: 5.068414063259753e-05, &quot;train_total_loss&quot;: 0.040027402791482446, &quot;train_seg_loss&quot;: 0.04001608065957309, &quot;train_cls_loss&quot;: 1.1322131909352606e-05, &quot;test_pixel-level F1&quot;: 0.6269838496863315, &quot;epoch&quot;: 100}</span>
<span class="line">{&quot;train_lr&quot;: 4.9894792537480576e-05, &quot;train_total_loss&quot;: 0.03938291078949974, &quot;train_seg_loss&quot;: 0.039372251576574625, &quot;train_cls_loss&quot;: 1.0659212925112626e-05, &quot;epoch&quot;: 101}</span>
<span class="line">{&quot;train_lr&quot;: 4.910553386394297e-05, &quot;train_total_loss&quot;: 0.039195733024078264, &quot;train_seg_loss&quot;: 0.039184275720948555, &quot;train_cls_loss&quot;: 1.1457303129702722e-05, &quot;epoch&quot;: 102}</span>
<span class="line">{&quot;train_lr&quot;: 4.8316563303634596e-05, &quot;train_total_loss&quot;: 0.0385435631179897, &quot;train_seg_loss&quot;: 0.03853294577689024, &quot;train_cls_loss&quot;: 1.061734109946144e-05, &quot;epoch&quot;: 103}</span>
<span class="line">{&quot;train_lr&quot;: 4.752807947567499e-05, &quot;train_total_loss&quot;: 0.035692626619510615, &quot;train_seg_loss&quot;: 0.03568181328162471, &quot;train_cls_loss&quot;: 1.0813337885906548e-05, &quot;test_pixel-level F1&quot;: 0.6672104743469334, &quot;epoch&quot;: 104}</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>模型每4个Epoch测试一次，所以只有对应的epoch才会保存<code>test_pixel-level F1</code>。</p><p>至此，我们就解释完了所有训练过程中的输出内容。</p><h3 id="开展测试" tabindex="-1"><a class="header-anchor" href="#开展测试"><span>开展测试</span></a></h3><p>我们在前面的指标测试中看到在104Epoch时，模型还有上涨趋势，但为了节约时间，我们将训练停在这里，开展后续的测试。</p><p>篡改检测数据集之间的鸿沟较大，泛化性能是衡量模型性能最重要的指标，所以我们希望一次性测量所有指标。区别于前面的教程，我们要用到一次性可以涵盖多个测试集的<code>test_datasets.json</code>文件来帮助测试。其格式如下，我们也在<code>benco init</code>后的文件中提供了此文件的样例。</p><div class="language-JSON line-numbers-mode" data-highlighter="prismjs" data-ext="JSON"><pre><code><span class="line">{</span>
<span class="line">    &quot;Columbia&quot;: &quot;/mnt/data0/public_datasets/IML/Columbia.json&quot;,</span>
<span class="line">    &quot;NIST16_1024&quot;: &quot;/mnt/data0/public_datasets/IML/NIST16_1024&quot;,</span>
<span class="line">    &quot;NIST16_cleaned&quot;: &quot;/mnt/data0/public_datasets/IML/NIST16_1024_cleaning&quot;,</span>
<span class="line">    &quot;coverage&quot;: &quot;/mnt/data0/public_datasets/IML/coverage.json&quot;,</span>
<span class="line">    &quot;CASIAv1&quot;: &quot;/mnt/data0/public_datasets/IML/CASIA1.0&quot;,</span>
<span class="line">    &quot;IMD20_1024&quot;: &quot;/mnt/data0/public_datasets/IML/IMD_20_1024&quot;</span>
<span class="line">}</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,18)),a("p",null,[s[2]||(s[2]=n("这里需要您预先处理好每一个数据集，数据集索引在")),p(e,{to:"/zh/imdl_data_model_hub/data/IMDLdatasets.html"},{default:o(()=>s[0]||(s[0]=[n("篡改检测数据集索引")])),_:1}),s[3]||(s[3]=n("章节，格式要求在")),p(e,{to:"/zh/guide/quickstart/0_dataprepare.html"},{default:o(()=>s[1]||(s[1]=[n("数据集准备章节")])),_:1}),s[4]||(s[4]=n("。上述路径必须整理为")),s[5]||(s[5]=a("code",null,"ManiDataset",-1)),s[6]||(s[6]=n("或者")),s[7]||(s[7]=a("code",null,"JsonDataset",-1)),s[8]||(s[8]=n("的格式。，"))]),s[10]||(s[10]=t(`<p>然后我们修改<code>test_mymodel.sh</code>文件来传入正确的参数，主要包含如下字段：</p><ul><li><code>--mymodel</code> 改为<code>MyConvNeXt</code></li><li>去掉多余的<code>--MyModel_Customized_param</code> 和 <code>--pre_trained_weights</code>尤其是<code>pretrained_path</code>一般是在模型训练前初始化的。测试阶段无关。</li><li>将<code>--checkpoint_path</code>设置为训练时输出所有<code>checkpoint-xx.pth</code>的文件夹。它会自动读取这下面所有的以<code>.pth</code>结尾的文件，并根据文件名中的数字确认该checkpoint来自于第几个epoch以正确的绘制测试时的指标折线图。</li><li>将<code>--test_data_json</code>设置为前文含有多个测试集信息的JSON的路径。</li><li>其它参数按照显存等条件要求，酌情设置即可，</li></ul><div class="hint-container important"><p class="hint-container-title">注意</p><p>如果你在训练时选择了<code>--if_padding</code>，这代表dataloader会将所有图像按照<a href="https://github.com/SunnyHaze/IML-ViT" target="_blank" rel="noopener noreferrer">IML-ViT</a>的0-padding方式组织，而非大多数模型的<code>--if_resizing</code>。那一定要确认测试时该参数与训练时保持一致，否则训练集和测试集不一致，一定会有性能损失。</p><p>可以通过Tensorboard可视化的图片双重检查是否正确选择padding或者resizing！</p></div><p>一个修改好的<code>test_mymodel.sh</code>如下：</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code><span class="line"><span class="token assign-left variable">base_dir</span><span class="token operator">=</span><span class="token string">&quot;./eval_dir&quot;</span></span>
<span class="line"><span class="token function">mkdir</span> <span class="token parameter variable">-p</span> <span class="token variable">\${base_dir}</span></span>
<span class="line"></span>
<span class="line"><span class="token assign-left variable">CUDA_VISIBLE_DEVICES</span><span class="token operator">=</span><span class="token number">0,1</span> <span class="token punctuation">\\</span></span>
<span class="line">torchrun  <span class="token punctuation">\\</span></span>
<span class="line">    <span class="token parameter variable">--standalone</span>    <span class="token punctuation">\\</span></span>
<span class="line">    <span class="token parameter variable">--nnodes</span><span class="token operator">=</span><span class="token number">1</span>     <span class="token punctuation">\\</span></span>
<span class="line">    <span class="token parameter variable">--nproc_per_node</span><span class="token operator">=</span><span class="token number">2</span> <span class="token punctuation">\\</span></span>
<span class="line">./test.py <span class="token punctuation">\\</span></span>
<span class="line">    <span class="token parameter variable">--model</span> MyConvNeXt <span class="token punctuation">\\</span></span>
<span class="line">    <span class="token parameter variable">--world_size</span> <span class="token number">1</span> <span class="token punctuation">\\</span></span>
<span class="line">    <span class="token parameter variable">--test_data_json</span> <span class="token string">&quot;./test_datasets.json&quot;</span> <span class="token punctuation">\\</span></span>
<span class="line">    <span class="token parameter variable">--checkpoint_path</span> <span class="token string">&quot;./output_dir/&quot;</span> <span class="token punctuation">\\</span></span>
<span class="line">    <span class="token parameter variable">--test_batch_size</span> <span class="token number">32</span> <span class="token punctuation">\\</span></span>
<span class="line">    <span class="token parameter variable">--image_size</span> <span class="token number">512</span> <span class="token punctuation">\\</span></span>
<span class="line">    <span class="token parameter variable">--if_resizing</span> <span class="token punctuation">\\</span></span>
<span class="line">    <span class="token parameter variable">--output_dir</span> <span class="token variable">\${base_dir}</span>/ <span class="token punctuation">\\</span></span>
<span class="line">    <span class="token parameter variable">--log_dir</span> <span class="token variable">\${base_dir}</span>/ <span class="token punctuation">\\</span></span>
<span class="line"><span class="token operator"><span class="token file-descriptor important">2</span>&gt;</span> <span class="token variable">\${base_dir}</span>/error.log <span class="token operator"><span class="token file-descriptor important">1</span>&gt;</span><span class="token variable">\${base_dir}</span>/logs.log</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后，记得修改<code>test.py</code>开头的<code>from mymodel import MyModel</code>为<code>from mymodel import MyConvNeXt</code>。</p><p>此时，运行如下指令即可开始批量在各种测试集上测试指标：</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code><span class="line"><span class="token function">sh</span> test_mymodel.sh</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>此时也可以通过Tensorboard来查看测试进度和结果。可以在左侧的<code>filter</code>框过滤<code>eval_dir</code>来仅查看此次测试的输出结果。</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code><span class="line">tensorboard <span class="token parameter variable">--logdir</span> ./</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>测试后得到的多个数据集的指标折线图如下，选择综合性能最好的Checkpoint，并在论文中记录相应的数据即可。</p><p><img src="`+r+`" alt=""></p><h3 id="鲁棒性测试" tabindex="-1"><a class="header-anchor" href="#鲁棒性测试"><span>鲁棒性测试</span></a></h3><p>鲁棒性测试因为对于“攻击类型”和“攻击强度”引入了两个维度进行网格搜索（<code>gird search</code>），所以一般只对测试阶段性能最好的那一个checkpoint进行鲁棒性测试。</p><p>所以相应的<code>test_robust_mymodel.sh</code>文件中，区别于<code>test_mymodel.sh</code>，这里的<code>--checkpoint_path</code>字段填入的路径指向一个具体的checkpoint，而非一个文件夹。</p><p>其他的字段同上，去掉无用的参数，填入需要的参数，并且记得修改<code>test_robust.py</code>开头的<code>from mymodel import MyModel</code>为<code>from mymodel import MyConvNeXt</code>。</p><p>我最终使用的<code>test_robust_mymodel.sh</code>如下</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code><span class="line"><span class="token assign-left variable">base_dir</span><span class="token operator">=</span><span class="token string">&quot;./eval_robust_dir&quot;</span></span>
<span class="line"><span class="token function">mkdir</span> <span class="token parameter variable">-p</span> <span class="token variable">\${base_dir}</span></span>
<span class="line"></span>
<span class="line"><span class="token assign-left variable">CUDA_VISIBLE_DEVICES</span><span class="token operator">=</span><span class="token number">0,1</span> <span class="token punctuation">\\</span></span>
<span class="line">torchrun  <span class="token punctuation">\\</span></span>
<span class="line">    <span class="token parameter variable">--standalone</span>    <span class="token punctuation">\\</span></span>
<span class="line">    <span class="token parameter variable">--nnodes</span><span class="token operator">=</span><span class="token number">1</span>     <span class="token punctuation">\\</span></span>
<span class="line">    <span class="token parameter variable">--nproc_per_node</span><span class="token operator">=</span><span class="token number">2</span> <span class="token punctuation">\\</span></span>
<span class="line">./test_robust.py <span class="token punctuation">\\</span></span>
<span class="line">    <span class="token parameter variable">--model</span> MyConvNeXt <span class="token punctuation">\\</span></span>
<span class="line">    <span class="token parameter variable">--world_size</span> <span class="token number">1</span> <span class="token punctuation">\\</span></span>
<span class="line">    <span class="token parameter variable">--test_data_path</span> <span class="token string">&quot;/mnt/data0/public_datasets/IML/CASIA1.0&quot;</span> <span class="token punctuation">\\</span></span>
<span class="line">    <span class="token parameter variable">--checkpoint_path</span> <span class="token string">&quot;/mnt/data0/xiaochen/workspace/ForensicHub_pure/guide/benco/output_dir/checkpoint-92.pth&quot;</span> <span class="token punctuation">\\</span></span>
<span class="line">    <span class="token parameter variable">--test_batch_size</span> <span class="token number">32</span> <span class="token punctuation">\\</span></span>
<span class="line">    <span class="token parameter variable">--image_size</span> <span class="token number">512</span> <span class="token punctuation">\\</span></span>
<span class="line">    <span class="token parameter variable">--if_resizing</span> <span class="token punctuation">\\</span></span>
<span class="line">    <span class="token parameter variable">--output_dir</span> <span class="token variable">\${base_dir}</span>/ <span class="token punctuation">\\</span></span>
<span class="line">    <span class="token parameter variable">--log_dir</span> <span class="token variable">\${base_dir}</span>/ <span class="token punctuation">\\</span></span>
<span class="line"><span class="token operator"><span class="token file-descriptor important">2</span>&gt;</span> <span class="token variable">\${base_dir}</span>/error.log <span class="token operator"><span class="token file-descriptor important">1</span>&gt;</span><span class="token variable">\${base_dir}</span>/logs.log</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>鲁棒性测试具体的攻击策略和强度的调整需要修改<code>test_robust.py</code>，请通过搜索<code>TODO</code>来定位到这段可以修改的代码：</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py"><pre><code><span class="line">    <span class="token triple-quoted-string string">&quot;&quot;&quot;=================================================</span>
<span class="line">    Modify here to Set the robustness test parameters TODO</span>
<span class="line">    ===================================================&quot;&quot;&quot;</span></span>
<span class="line">    robustness_list <span class="token operator">=</span> <span class="token punctuation">[</span></span>
<span class="line">            GaussianBlurWrapper<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">19</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">            GaussianNoiseWrapper<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">19</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> </span>
<span class="line">            JpegCompressionWrapper<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">60</span><span class="token punctuation">,</span> <span class="token number">70</span><span class="token punctuation">,</span> <span class="token number">80</span><span class="token punctuation">,</span> <span class="token number">90</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">]</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这些<code>wrapper</code>后面的列表代表具体攻击的强度，他们内部封装了<a href="https://github.com/albumentations-team/albumentations" target="_blank" rel="noopener noreferrer">Albumentation</a>提供的Transform来实现攻击。<code>wrapper</code>本身的实现请参考此<a href="https://github.com/scu-zjz/ForensicHub/blob/main/ForensicHub/transforms/robustness_wrapper.py" target="_blank" rel="noopener noreferrer">链接</a>。</p><p>特别的，你可以在当前路径下参考源码中<code>wrapper</code>的实现封装新的自定义<code>wrapper</code>，然后像<code>from mymodel import MyConvNeXt</code>一样import你自己的wrapper到这里使用。这样无需修改源码，也能实现自定义灵活的鲁棒性测试。</p><hr><p>对于测试结果，同样的，你可以通过Tensorboard查看：</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code><span class="line">tensorboard <span class="token parameter variable">--logdir</span> ./</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>这时候可能会产生很多很多不同的记录，请活用Tensorboard左上角的filter功能，过滤你当前需要记录的攻击类型和响应的结果。</p><p><img src="`+u+'" alt=""></p><hr><h3 id="结语" tabindex="-1"><a class="header-anchor" href="#结语"><span>结语</span></a></h3><p>这样我们就完成了一次从头到尾自己设计模型，训练模型，完成测试及鲁棒性测试的过程。有任何疑惑或者不完善的地方，欢迎向我们的仓库提issue或者给作者团队发邮件联系。第一手用户的建议对我们，以及对今后的学者帮助都会很大！</p>',30))])}const y=d(k,[["render",_]]),f=JSON.parse('{"path":"/zh/guide/quickstart/4_whole_pipeline.html","title":"","lang":"zh-CN","frontmatter":{"description":"在Tensorboard中，我们可以看到很多有用的指标，可以监测训练过程和模型的收敛情况。它们全部和my_model.py中模型的forward()函数返回的字典中的信息对应。 损失函数的可视化对应visual_loss字段对应的字典: 评价指标的计算来自于pred_mask和pred_label的结果和mask计算得到： alt text 可视化的预...","head":[["link",{"rel":"alternate","hreflang":"en-us","href":"https://scu-zjz.github.io/ForensicHub-doc/ForensicHub-doc/guide/quickstart/4_whole_pipeline.html"}],["meta",{"property":"og:url","content":"https://scu-zjz.github.io/ForensicHub-doc/ForensicHub-doc/zh/guide/quickstart/4_whole_pipeline.html"}],["meta",{"property":"og:site_name","content":"ForensicHub 文档"}],["meta",{"property":"og:description","content":"在Tensorboard中，我们可以看到很多有用的指标，可以监测训练过程和模型的收敛情况。它们全部和my_model.py中模型的forward()函数返回的字典中的信息对应。 损失函数的可视化对应visual_loss字段对应的字典: 评价指标的计算来自于pred_mask和pred_label的结果和mask计算得到： alt text 可视化的预..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://scu-zjz.github.io/ForensicHub-doc/ForensicHub-doc/images/training/training_loss.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:locale:alternate","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2025-04-16T09:03:03.000Z"}],["meta",{"property":"article:modified_time","content":"2025-04-16T09:03:03.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"\\",\\"image\\":[\\"https://scu-zjz.github.io/ForensicHub-doc/ForensicHub-doc/images/training/training_loss.png\\",\\"https://scu-zjz.github.io/ForensicHub-doc/ForensicHub-doc/images/training/pixelF1.png\\",\\"https://scu-zjz.github.io/ForensicHub-doc/ForensicHub-doc/images/training/train_test_samples.png\\",\\"https://scu-zjz.github.io/ForensicHub-doc/ForensicHub-doc/images/training/testing_results.png\\",\\"https://scu-zjz.github.io/ForensicHub-doc/ForensicHub-doc/images/training/robustness_test_plot.png\\"],\\"dateModified\\":\\"2025-04-16T09:03:03.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":3,"title":"开展测试","slug":"开展测试","link":"#开展测试","children":[]},{"level":3,"title":"鲁棒性测试","slug":"鲁棒性测试","link":"#鲁棒性测试","children":[]},{"level":3,"title":"结语","slug":"结语","link":"#结语","children":[]}],"git":{"updatedTime":1744794183000,"contributors":[{"name":"Ma Xiaochen (马晓晨)","username":"","email":"mxch1122@126.com","commits":2}],"changelog":[{"hash":"0e74f1d2aa8755e9efae0840d449e9f06e10925a","time":1744794183000,"email":"mxch1122@126.com","author":"Ma Xiaochen (马晓晨)","message":"[rename] rename all IMDLbenco to ForensicHub"},{"hash":"c131b603f94f974b69bdb6ca4dfc284ba7e4c78f","time":1743461235000,"email":"mxch1122@126.com","author":"Ma Xiaochen (马晓晨)","message":"[update] finish case3 in tutorial"}]},"filePathRelative":"zh/guide/quickstart/4_whole_pipeline.md","autoDesc":true}');export{y as comp,f as data};
